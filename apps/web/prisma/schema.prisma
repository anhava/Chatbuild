// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  FREE
  PRO
  PREMIUM
  ENTERPRISE
}

enum ChatbotStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum FileStatus {
  PROCESSING
  READY
  FAILED
}

enum UrlStatus {
  PROCESSING
  READY
  FAILED
}

enum MessageType {
  USER
  BOT
  AGENT
}

model User {
  id               String         @id @default(uuid()) @db.Uuid
  email           String         @unique
  passwordHash    String
  planType        PlanType       @default(FREE)
  creditsRemaining Int           @default(300)
  subscription    Subscription?
  chatbots        Chatbot[]
  createdAt       DateTime       @default(now()) @db.Timestamptz
  updatedAt       DateTime       @updatedAt @db.Timestamptz
}

model Subscription {
  id                   String    @id @default(uuid()) @db.Uuid
  userId              String    @unique @db.Uuid
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubscriptionId String    @unique
  planType            PlanType
  status              String
  currentPeriodStart  DateTime  @db.Timestamptz
  currentPeriodEnd    DateTime  @db.Timestamptz
  createdAt           DateTime  @default(now()) @db.Timestamptz
  updatedAt           DateTime  @updatedAt @db.Timestamptz
}

model Chatbot {
  id               String         @id @default(uuid()) @db.Uuid
  userId          String         @db.Uuid
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  apiKey          String         @unique @default(uuid())
  logoUrl         String?
  themeColor      String?
  welcomeMessage  String         @default("Hello! How can I help you today?")
  status          ChatbotStatus  @default(ACTIVE)
  isLiveChatEnabled Boolean      @default(false)
  files           KnowledgeFile[]
  urls            KnowledgeUrl[]
  faqs            FAQ[]
  threads         ChatThread[]
  createdAt       DateTime       @default(now()) @db.Timestamptz
  updatedAt       DateTime       @updatedAt @db.Timestamptz

  @@index([userId])
}

model KnowledgeFile {
  id          String     @id @default(uuid()) @db.Uuid
  chatbotId   String     @db.Uuid
  chatbot     Chatbot    @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  fileName    String
  fileType    String
  fileSize    Int
  fileUrl     String
  status      FileStatus @default(PROCESSING)
  createdAt   DateTime   @default(now()) @db.Timestamptz
  updatedAt   DateTime   @updatedAt @db.Timestamptz

  @@index([chatbotId])
}

model KnowledgeUrl {
  id            String    @id @default(uuid()) @db.Uuid
  chatbotId     String    @db.Uuid
  chatbot       Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  url           String
  status        UrlStatus @default(PROCESSING)
  lastCrawledAt DateTime? @db.Timestamptz
  createdAt     DateTime  @default(now()) @db.Timestamptz
  updatedAt     DateTime  @updatedAt @db.Timestamptz

  @@index([chatbotId])
}

model FAQ {
  id          String   @id @default(uuid()) @db.Uuid
  chatbotId   String   @db.Uuid
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  question    String
  answer      String
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz

  @@index([chatbotId])
}

model ChatThread {
  id           String       @id @default(uuid()) @db.Uuid
  chatbotId    String       @db.Uuid
  chatbot      Chatbot      @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  visitorId    String?
  visitorName  String?
  status       String       @default("active")
  messages     ChatMessage[]
  createdAt    DateTime     @default(now()) @db.Timestamptz
  updatedAt    DateTime     @updatedAt @db.Timestamptz

  @@index([chatbotId])
}

model ChatMessage {
  id          String      @id @default(uuid()) @db.Uuid
  threadId    String      @db.Uuid
  thread      ChatThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  type        MessageType
  senderId    String?     @db.Uuid
  content     String
  createdAt   DateTime    @default(now()) @db.Timestamptz

  @@index([threadId])
}

model UsageLog {
  id          String   @id @default(uuid()) @db.Uuid
  type        String   // message, file_upload, url_crawl
  amount      Int
  metadata    Json?
  createdAt   DateTime @default(now()) @db.Timestamptz
}
